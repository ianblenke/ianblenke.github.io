<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Elasticbeanstalk | Ian Blenke - DevOps]]></title>
  <link href="http://ian.blenke.com/blog/categories/elasticbeanstalk/atom.xml" rel="self"/>
  <link href="http://ian.blenke.com/"/>
  <updated>2015-06-28T04:16:50-04:00</updated>
  <id>http://ian.blenke.com/</id>
  <author>
    <name><![CDATA[Ian Blenke]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AWS Docker Walkthrough With ElasticBeanstalk: Part 1]]></title>
    <link href="http://ian.blenke.com/blog/2015/06/27/aws-docker-walkthrough-with-elasticbeanstalk-part-1/"/>
    <updated>2015-06-27T13:14:08-04:00</updated>
    <id>http://ian.blenke.com/blog/2015/06/27/aws-docker-walkthrough-with-elasticbeanstalk-part-1</id>
    <content type="html"><![CDATA[<p>While deploying docker containers for immutable infrastructure on AWS ElasticBeanstalk,
I’ve learned a number of useful tricks that go beyond the official Amazon documentation.</p>

<p>This series of posts are an attempt to summarize some of the useful bits that may benefit
others facing the same challenges.</p>

<hr />

<h1 id="part-1--preparing-a-vpc-for-your-elasticbeanstalk-environments">Part 1 : Preparing a VPC for your ElasticBeanstalk environments</h1>

<hr />

<h3 id="step-1--prepare-your-aws-development-environment">Step 1 : Prepare your AWS development environment.</h3>

<p>On OS/X, I install <a href="http://brew.sh">homebrew</a>, and then:</p>

<p><code>bash
brew install awscli
</code></p>

<p>On Windows, I install <a href="https://chocolatey.org/">chocolatey</a> and then:</p>

<p><code>bash
choco install awscli
</code></p>

<p>Because <code>awscli</code> is a python tool, on either of these, or on the various Linux distribution flavors, we can also avoid native package management and alternatively use python <code>easyinstall</code> or <code>pip</code> directly:</p>

<p><code>bash
pip install awscli
</code></p>

<p>You may (or may not) need to prefix that pip install with <code>sudo</code>, depending. ie:</p>

<p><code>bash
sudo pip install awscli
</code></p>

<p>These tools will detect if they are out of date when you run them. You may eventually get a message like:</p>

<p><code>
Alert: An update to this CLI is available.
</code></p>

<p>When this happens, you will likely want to either upgrade via homebrew:</p>

<p><code>bash
brew update &amp; brew upgrade awscli
</code></p>

<p>or, more likely, upgrade using pip directly:</p>

<p><code>bash
pip install --upgrade awscli
</code></p>

<p>Again, you may (or may not) need to prefix that pip install with <code>sudo</code>, depending. ie:</p>

<p><code>bash
sudo pip install --upgrade awscli
</code></p>

<p>For the hardcore Docker fans out there, this is pretty trivial to run as a container as well. See <a href="https://github.com/CenturyLinkLabs/docker-aws-cli">CenturyLinkLabs/docker-aws-cli</a> for a good example of that. Managing an aws config file requires volume mapping, or passing <code>-e AWS_ACCESS_KEY_ID={redacted} -e AWS_SECRET_ACCESS_KEY={redacted}</code>. There are various guides to doing this out there. This will not be one of them ;)</p>

<h3 id="step-2-prepare-your-aws-environment-variables">Step 2: Prepare your AWS environment variables</h3>

<p>If you haven’t already, <a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#config-settings-and-precedence">prepare for AWS cli access</a>.</p>

<p>You can now configure your <code>~/.aws/config</code> by running:</p>

<pre><code>aws configure
</code></pre>

<p>This will create a default configuration.</p>

<p>I’ve yet to work with any company with only one AWS account though. You will likely find that you need to support managing multiple AWS configuration profiles.</p>

<p>Here’s an example <code>~/.aws/config</code> file with multiple profiles:</p>

<p>&#8220;`
[default]
output = json
region = us-east-1</p>

<p>[profile aws-dev]
AWS_ACCESS_KEY_ID={REDACTED}
AWS_SECRET_ACCESS_KEY={REDACTED}</p>

<p>[profile aws-prod]
AWS_ACCESS_KEY_ID={REDACTED}
AWS_SECRET_ACCESS_KEY={REDACTED}
&#8220;`</p>

<p>You can create this by running:</p>

<p><code>bash
$ aws configure --profile aws-dev
AWS Access Key ID [REDACTED]: YOURACCESSKEY
AWS Secret Access Key [REDACTED]: YOURSECRETKEY
Default region name [None]: us-east-1
Default output format [None]: json
</code></p>

<p>Getting in the habit of specifying <code>--profile aws-dev</code> is a bit of a reassurance that you’re provisioning resources into the correct AWS account, and not sullying AWS cloud resources between VPC environments.</p>

<h3 id="step-3-preparing-a-vpc">Step 3: Preparing a VPC</h3>

<p>Deploying anything to AWS EC2 Classic instances these days is to continue down the path of legacy maintenance.</p>

<p>For new ElasticBeanstalk deployments, a VPC should be used.</p>

<p>The easiest/best way to deploy a VPC is to use a <a href="http://aws.amazon.com/cloudformation/aws-cloudformation-templates/">CloudFormation template</a>. </p>

<p>Below is a public gist of a VPC CloudFormation that I use for deployment:</p>

<p><div><script src='https://gist.github.com/0a6a6f26d1ecaa0d81eb.js'></script>
<noscript><pre><code>{
  &quot;AWSTemplateFormatVersion&quot;: &quot;2010-09-09&quot;,
  &quot;Description&quot;: &quot;MyApp VPC&quot;,
  &quot;Parameters&quot; : {
    &quot;Project&quot; : {
      &quot;Description&quot; : &quot;Project name to tag resources with&quot;,
      &quot;Type&quot; : &quot;String&quot;,
      &quot;MinLength&quot;: &quot;1&quot;,
      &quot;MaxLength&quot;: &quot;16&quot;,
      &quot;AllowedPattern&quot; : &quot;[a-z]*&quot;,
      &quot;ConstraintDescription&quot; : &quot;any alphabetic string (1-16) characters in length&quot;
    },
    &quot;Environment&quot; : {
      &quot;Description&quot; : &quot;Environment name to tag resources with&quot;,
      &quot;Type&quot; : &quot;String&quot;,
      &quot;AllowedValues&quot; : [ &quot;dev&quot;, &quot;qa&quot;, &quot;prod&quot; ],
      &quot;ConstraintDescription&quot; : &quot;must be one of dev, qa, or prod&quot;
    },
    &quot;SSHFrom&quot;: {
      &quot;Description&quot; : &quot;Lockdown SSH access (default: can be accessed from anywhere)&quot;,
      &quot;Type&quot; : &quot;String&quot;,
      &quot;MinLength&quot;: &quot;9&quot;,
      &quot;MaxLength&quot;: &quot;18&quot;,
      &quot;Default&quot; : &quot;0.0.0.0/0&quot;,
      &quot;AllowedPattern&quot; : &quot;(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})&quot;,
      &quot;ConstraintDescription&quot; : &quot;must be a valid CIDR range of the form x.x.x.x/x.&quot;
    },
    &quot;VPCNetworkCIDR&quot; : {
      &quot;Description&quot;: &quot;The CIDR block for the entire VPC network&quot;,
      &quot;Type&quot;: &quot;String&quot;,
      &quot;AllowedPattern&quot; : &quot;(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})&quot;,
      &quot;Default&quot;: &quot;10.114.0.0/16&quot;,
      &quot;ConstraintDescription&quot; : &quot;must be an IPv4 dotted quad plus slash plus network bit length in CIDR format&quot;
    },
    &quot;VPCSubnet0CIDR&quot; : {
      &quot;Description&quot;: &quot;The CIDR block for VPC subnet0 segment&quot;,
      &quot;Type&quot;: &quot;String&quot;,
      &quot;AllowedPattern&quot; : &quot;(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})&quot;,
      &quot;Default&quot;: &quot;10.114.0.0/24&quot;,
      &quot;ConstraintDescription&quot; : &quot;must be an IPv4 dotted quad plus slash plus network bit length in CIDR format&quot;
    },
    &quot;VPCSubnet1CIDR&quot; : {
      &quot;Description&quot;: &quot;The CIDR block for VPC subnet1 segment&quot;,
      &quot;Type&quot;: &quot;String&quot;,
      &quot;AllowedPattern&quot; : &quot;(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})&quot;,
      &quot;Default&quot;: &quot;10.114.1.0/24&quot;,
      &quot;ConstraintDescription&quot; : &quot;must be an IPv4 dotted quad plus slash plus network bit length in CIDR format&quot;
    },
    &quot;VPCSubnet2CIDR&quot; : {
      &quot;Description&quot;: &quot;The CIDR block for VPC subnet2 segment&quot;,
      &quot;Type&quot;: &quot;String&quot;,
      &quot;AllowedPattern&quot; : &quot;(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})&quot;,
      &quot;Default&quot;: &quot;10.114.2.0/24&quot;,
      &quot;ConstraintDescription&quot; : &quot;must be an IPv4 dotted quad plus slash plus network bit length in CIDR format&quot;
    }
  },
  &quot;Resources&quot; : {
    &quot;VPC&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::VPC&quot;,
      &quot;Properties&quot; : {
        &quot;EnableDnsSupport&quot; : &quot;true&quot;,
        &quot;EnableDnsHostnames&quot; : &quot;true&quot;,
        &quot;CidrBlock&quot; : { &quot;Ref&quot;: &quot;VPCNetworkCIDR&quot; },
        &quot;Tags&quot; : [
          { &quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ &quot;vpc&quot;, { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot; : &quot;Environment&quot; } ] ] } },
          { &quot;Key&quot; : &quot;Project&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Project&quot; } },
          { &quot;Key&quot; : &quot;Environment&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Environment&quot; } }
        ]
      }
    },
    &quot;VPCSubnet0&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::Subnet&quot;,
      &quot;Properties&quot; : {
        &quot;VpcId&quot; : { &quot;Ref&quot; : &quot;VPC&quot; },
        &quot;AvailabilityZone&quot;: { &quot;Fn::Select&quot; : [ 0, { &quot;Fn::GetAZs&quot; : &quot;&quot; } ] },
        &quot;CidrBlock&quot; : { &quot;Ref&quot;: &quot;VPCSubnet0CIDR&quot; },
        &quot;Tags&quot; : [
          { &quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ &quot;subnet&quot;, { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot;: &quot;Environment&quot; } ] ] } },
          { &quot;Key&quot; : &quot;AZ&quot;, &quot;Value&quot; : { &quot;Fn::Select&quot; : [ 0, { &quot;Fn::GetAZs&quot; : &quot;&quot; } ] } },
          { &quot;Key&quot; : &quot;Project&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Project&quot; } },
          { &quot;Key&quot; : &quot;Environment&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Environment&quot; } }
        ]
      }
    },
    &quot;VPCSubnet1&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::Subnet&quot;,
      &quot;Properties&quot; : {
        &quot;VpcId&quot; : { &quot;Ref&quot; : &quot;VPC&quot; },
        &quot;AvailabilityZone&quot;: { &quot;Fn::Select&quot; : [ 1, { &quot;Fn::GetAZs&quot; : &quot;&quot; } ] },
        &quot;CidrBlock&quot; : { &quot;Ref&quot;: &quot;VPCSubnet1CIDR&quot; },
        &quot;Tags&quot; : [
          { &quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ &quot;subnet&quot;, { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot;: &quot;Environment&quot; } ] ] } },
          { &quot;Key&quot; : &quot;AZ&quot;, &quot;Value&quot; : { &quot;Fn::Select&quot; : [ 1, { &quot;Fn::GetAZs&quot; : &quot;&quot; } ] } },
          { &quot;Key&quot; : &quot;Project&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Project&quot; } },
          { &quot;Key&quot; : &quot;Environment&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Environment&quot; } }
        ]
      }
    },
    &quot;VPCSubnet2&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::Subnet&quot;,
      &quot;Properties&quot; : {
        &quot;VpcId&quot; : { &quot;Ref&quot; : &quot;VPC&quot; },
        &quot;AvailabilityZone&quot;: { &quot;Fn::Select&quot; : [ 2, { &quot;Fn::GetAZs&quot; : &quot;&quot; } ] },
        &quot;CidrBlock&quot; : { &quot;Ref&quot;: &quot;VPCSubnet2CIDR&quot; },
        &quot;Tags&quot; : [
          { &quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ &quot;subnet&quot;, { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot;: &quot;Environment&quot; } ] ] } },
          { &quot;Key&quot; : &quot;AZ&quot;, &quot;Value&quot; : { &quot;Fn::Select&quot; : [ 2, { &quot;Fn::GetAZs&quot; : &quot;&quot; } ] } },
          { &quot;Key&quot; : &quot;Project&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Project&quot; } },
          { &quot;Key&quot; : &quot;Environment&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Environment&quot; } }
        ]
      }
    },
    &quot;InternetGateway&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::InternetGateway&quot;,
      &quot;Properties&quot; : {
        &quot;Tags&quot; : [
          { &quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ &quot;igw&quot;, { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot;: &quot;Environment&quot; } ] ] } },
          { &quot;Key&quot; : &quot;Project&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Project&quot; } },
          { &quot;Key&quot; : &quot;Environment&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Environment&quot; } }
        ]
      }
    },
    &quot;GatewayToInternet&quot; : {
       &quot;Type&quot; : &quot;AWS::EC2::VPCGatewayAttachment&quot;,
       &quot;Properties&quot; : {
         &quot;VpcId&quot; : { &quot;Ref&quot; : &quot;VPC&quot; },
         &quot;InternetGatewayId&quot; : { &quot;Ref&quot; : &quot;InternetGateway&quot; }
       }
    },
    &quot;PublicRouteTable&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::RouteTable&quot;,
      &quot;DependsOn&quot; : &quot;GatewayToInternet&quot;,
      &quot;Properties&quot; : {
        &quot;VpcId&quot; : { &quot;Ref&quot; : &quot;VPC&quot; },
        &quot;Tags&quot; : [
          { &quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ &quot;route&quot;, { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot; : &quot;Environment&quot; } ] ] } },
          { &quot;Key&quot; : &quot;Project&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Project&quot; } },
          { &quot;Key&quot; : &quot;Environment&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Environment&quot; } }
        ]
      }
    },
    &quot;PublicRoute&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::Route&quot;,
      &quot;DependsOn&quot; : &quot;GatewayToInternet&quot;,
      &quot;Properties&quot; : {
        &quot;RouteTableId&quot; : { &quot;Ref&quot; : &quot;PublicRouteTable&quot; },
        &quot;DestinationCidrBlock&quot; : &quot;0.0.0.0/0&quot;,
        &quot;GatewayId&quot; : { &quot;Ref&quot; : &quot;InternetGateway&quot; }
      }
    },
    &quot;VPCSubnet0RouteTableAssociation&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::SubnetRouteTableAssociation&quot;,
      &quot;Properties&quot; : {
        &quot;SubnetId&quot; : { &quot;Ref&quot; : &quot;VPCSubnet0&quot; },
        &quot;RouteTableId&quot; : { &quot;Ref&quot; : &quot;PublicRouteTable&quot; }
      }
    },
    &quot;VPCSubnet1RouteTableAssociation&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::SubnetRouteTableAssociation&quot;,
      &quot;Properties&quot; : {
        &quot;SubnetId&quot; : { &quot;Ref&quot; : &quot;VPCSubnet1&quot; },
        &quot;RouteTableId&quot; : { &quot;Ref&quot; : &quot;PublicRouteTable&quot; }
      }
    },
    &quot;VPCSubnet2RouteTableAssociation&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::SubnetRouteTableAssociation&quot;,
      &quot;Properties&quot; : {
        &quot;SubnetId&quot; : { &quot;Ref&quot; : &quot;VPCSubnet2&quot; },
        &quot;RouteTableId&quot; : { &quot;Ref&quot; : &quot;PublicRouteTable&quot; }
      }
    },
    &quot;InstanceRole&quot;: {
      &quot;Type&quot;: &quot;AWS::IAM::Role&quot;,
      &quot;Properties&quot;: {
        &quot;AssumeRolePolicyDocument&quot;: {
          &quot;Version&quot;: &quot;2012-10-17&quot;,
          &quot;Statement&quot;: [
            {
              &quot;Effect&quot;: &quot;Allow&quot;,
              &quot;Principal&quot;: {
                &quot;Service&quot;: [ &quot;ec2.amazonaws.com&quot; ]
              },
              &quot;Action&quot;: [ &quot;sts:AssumeRole&quot; ]
            }
          ]
        },
        &quot;Path&quot;: &quot;/&quot;,
        &quot;Policies&quot;: [
          {
            &quot;PolicyName&quot;: &quot;ApplicationPolicy&quot;,
            &quot;PolicyDocument&quot;: {
              &quot;Version&quot;: &quot;2012-10-17&quot;,
              &quot;Statement&quot;: [
                {
                  &quot;Effect&quot;: &quot;Allow&quot;,
                  &quot;Action&quot;: [
                    &quot;elasticbeanstalk:*&quot;,
                    &quot;elastiCache:*&quot;,
                    &quot;ec2:*&quot;,
                    &quot;elasticloadbalancing:*&quot;,
                    &quot;autoscaling:*&quot;,
                    &quot;cloudwatch:*&quot;,
                    &quot;dynamodb:*&quot;,
                    &quot;s3:*&quot;,
                    &quot;sns:*&quot;,
                    &quot;sqs:*&quot;,
                    &quot;cloudformation:*&quot;,
                    &quot;rds:*&quot;,
                    &quot;iam:AddRoleToInstanceProfile&quot;,
                    &quot;iam:CreateInstanceProfile&quot;,
                    &quot;iam:CreateRole&quot;,
                    &quot;iam:PassRole&quot;,
                    &quot;iam:ListInstanceProfiles&quot;
                  ],
                  &quot;Resource&quot;: &quot;*&quot;
                }
              ]
            }
          }
        ]
      }
    },
    &quot;InstanceProfile&quot;: {
       &quot;Type&quot;: &quot;AWS::IAM::InstanceProfile&quot;,
       &quot;Properties&quot;: {
          &quot;Path&quot;: &quot;/&quot;,
          &quot;Roles&quot;: [ { &quot;Ref&quot;: &quot;InstanceRole&quot; } ]
       }
    },
    &quot;VPCSecurityGroup&quot; : {
      &quot;Type&quot; : &quot;AWS::EC2::SecurityGroup&quot;,
      &quot;Properties&quot; : {
        &quot;GroupDescription&quot; : { &quot;Fn::Join&quot;: [ &quot;&quot;, [ &quot;VPC Security Group for &quot;, { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot;: &quot;Environment&quot; } ] ] } ] ] },
        &quot;SecurityGroupIngress&quot; : [
          {&quot;IpProtocol&quot;: &quot;tcp&quot;, &quot;FromPort&quot; : &quot;22&quot;,  &quot;ToPort&quot; : &quot;22&quot;,  &quot;CidrIp&quot; : { &quot;Ref&quot; : &quot;SSHFrom&quot; }},
          {&quot;IpProtocol&quot;: &quot;tcp&quot;, &quot;FromPort&quot;: &quot;80&quot;, &quot;ToPort&quot;: &quot;80&quot;, &quot;CidrIp&quot;: &quot;0.0.0.0/0&quot; },
          {&quot;IpProtocol&quot;: &quot;tcp&quot;, &quot;FromPort&quot;: &quot;443&quot;, &quot;ToPort&quot;: &quot;443&quot;, &quot;CidrIp&quot;: &quot;0.0.0.0/0&quot; }
        ],
        &quot;VpcId&quot; : { &quot;Ref&quot; : &quot;VPC&quot; },
        &quot;Tags&quot; : [
          { &quot;Key&quot; : &quot;Name&quot;, &quot;Value&quot; : { &quot;Fn::Join&quot;: [ &quot;-&quot;, [ &quot;sg&quot;, { &quot;Ref&quot;: &quot;Project&quot; }, { &quot;Ref&quot; : &quot;Environment&quot; } ] ] } },
          { &quot;Key&quot; : &quot;Project&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Project&quot; } },
          { &quot;Key&quot; : &quot;Environment&quot;, &quot;Value&quot; : { &quot;Ref&quot;: &quot;Environment&quot; } }
        ]
      }
    },
    &quot;VPCSGIngress&quot;: {
      &quot;Type&quot;: &quot;AWS::EC2::SecurityGroupIngress&quot;,
      &quot;Properties&quot;: {
        &quot;GroupId&quot;: { &quot;Ref&quot; : &quot;VPCSecurityGroup&quot; },
        &quot;IpProtocol&quot;: &quot;-1&quot;,
        &quot;FromPort&quot;: &quot;0&quot;,
        &quot;ToPort&quot;: &quot;65535&quot;,
        &quot;SourceSecurityGroupId&quot;: { &quot;Ref&quot;: &quot;VPCSecurityGroup&quot; }
      }
    }
  },
  &quot;Outputs&quot; : {
    &quot;VpcId&quot; : {
      &quot;Description&quot; : &quot;VPC Id&quot;,
      &quot;Value&quot; :  { &quot;Ref&quot; : &quot;VPC&quot; }
    },
    &quot;VPCDefaultNetworkAcl&quot; : {
      &quot;Description&quot; : &quot;VPC&quot;,
      &quot;Value&quot; :  { &quot;Fn::GetAtt&quot; : [&quot;VPC&quot;, &quot;DefaultNetworkAcl&quot;] }
    },
    &quot;VPCDefaultSecurityGroup&quot; : {
      &quot;Description&quot; : &quot;VPC Default Security Group that we blissfully ignore thanks to self-referencing bugs&quot;,
      &quot;Value&quot; :  { &quot;Fn::GetAtt&quot; : [&quot;VPC&quot;, &quot;DefaultSecurityGroup&quot;] }
    },
    &quot;VPCSecurityGroup&quot; : {
      &quot;Description&quot; : &quot;VPC Security Group created by this stack&quot;,
      &quot;Value&quot; :  { &quot;Ref&quot;: &quot;VPCSecurityGroup&quot; }
    },
    &quot;VPCSubnet0&quot;: {
      &quot;Description&quot;: &quot;The subnet id for VPCSubnet0&quot;,
      &quot;Value&quot;: {
        &quot;Ref&quot;: &quot;VPCSubnet0&quot;
      }
    },
    &quot;VPCSubnet1&quot;: {
      &quot;Description&quot;: &quot;The subnet id for VPCSubnet1&quot;,
      &quot;Value&quot;: {
        &quot;Ref&quot;: &quot;VPCSubnet1&quot;
      }
    },
    &quot;VPCSubnet2&quot;: {
      &quot;Description&quot;: &quot;The subnet id for VPCSubnet2&quot;,
      &quot;Value&quot;: {
        &quot;Ref&quot;: &quot;VPCSubnet2&quot;
      }
    }
  }
}</code></pre></noscript></div>
</p>

<p>Here is an example CloudFormation parameters file for this template:</p>

<p><div><script src='https://gist.github.com/9f4b8dd2b39c7d1c31ef.js'></script>
<noscript><pre><code>[
  { &quot;ParameterKey&quot;: &quot;Project&quot;, &quot;ParameterValue&quot;: &quot;myapp&quot; },
  { &quot;ParameterKey&quot;: &quot;Environment&quot;, &quot;ParameterValue&quot;: &quot;dev&quot; },
  { &quot;ParameterKey&quot;: &quot;VPCNetworkCIDR&quot;, &quot;ParameterValue&quot;: &quot;10.0.0.0/16&quot; },
  { &quot;ParameterKey&quot;: &quot;VPCSubnet0CIDR&quot;, &quot;ParameterValue&quot;: &quot;10.0.0.0/24&quot; },
  { &quot;ParameterKey&quot;: &quot;VPCSubnet1CIDR&quot;, &quot;ParameterValue&quot;: &quot;10.0.1.0/24&quot; },
  { &quot;ParameterKey&quot;: &quot;VPCSubnet2CIDR&quot;, &quot;ParameterValue&quot;: &quot;10.0.2.0/24&quot; }
]</code></pre></noscript></div>
</p>

<p>To script the creation, updating, watching, and deleting of the CloudFormation VPC, I have this Makefile as well:</p>

<p><div><script src='https://gist.github.com/55b740ff19825d621ef4.js'></script>
<noscript><pre><code>STACK:=myapp-dev
TEMPLATE:=cloudformation-template_vpc-iam.json
PARAMETERS:=cloudformation-parameters_myapp-dev.json
AWS_REGION:=us-east-1
AWS_PROFILE:=aws-dev

all:
	@which aws || pip install awscli
	aws cloudformation create-stack --stack-name $(STACK) --template-body file://`pwd`/$(TEMPLATE) --parameters file://`pwd`/$(PARAMETERS) --capabilities CAPABILITY_IAM --profile $(AWS_PROFILE) --region $(AWS_REGION)

update:
	aws cloudformation update-stack --stack-name $(STACK) --template-body file://`pwd`/$(TEMPLATE) --parameters file://`pwd`/$(PARAMETERS) --capabilities CAPABILITY_IAM --profile $(AWS_PROFILE) --region $(AWS_REGION)

events:
	aws cloudformation describe-stack-events --stack-name $(STACK) --profile $(AWS_PROFILE) --region $(AWS_REGION)

watch:
	watch --interval 10 &quot;bash -c &#39;make events | head -25&#39;&quot;
	
outputs:
	@which jq || ( which brew &amp;&amp; brew install jq || which apt-get &amp;&amp; apt-get install jq || which yum &amp;&amp; yum install jq || which choco &amp;&amp; choco install jq)
	aws cloudformation describe-stacks --stack-name $(STACK) --profile $(AWS_PROFILE) --region $(AWS_REGION) | jq -r &#39;.Stacks[].Outputs&#39;

delete:
	aws cloudformation delete-stack --stack-name $(STACK) --profile $(AWS_PROFILE) --region $(AWS_REGION)
</code></pre></noscript></div>
</p>

<p>You can get these same files by cloning my github project, and ssuming you have a profile named <code>aws-dev</code> as mentioned above, you can even run <code>make</code> and have it create the <code>myapp-dev</code> VPC via CloudFormation:</p>

<pre><code>git clone https://github.com/ianblenke/aws-docker-walkthrough
cd aws-docker-walkthrough
make
</code></pre>

<p>You can run <code>make watch</code> to watch the CloudFormation events and wait for a <code>CREATE_COMPLETE</code> state.</p>

<p>When this is complete, you can see the CloudFormation outputs by running:</p>

<pre><code>make output
</code></pre>

<p>The output will look something like this:</p>

<p><div><script src='https://gist.github.com/59715079304a6db7182c.js'></script>
<noscript><pre><code>aws cloudformation describe-stacks --stack-name myapp-dev --profile aws-dev --region us-east-1 | jq -r &#39;.Stacks[].Outputs&#39;
[
  {
    &quot;Description&quot;: &quot;VPC Id&quot;,
    &quot;OutputKey&quot;: &quot;VpcId&quot;,
    &quot;OutputValue&quot;: &quot;vpc-b7d1d8d2&quot;
  },
  {
    &quot;Description&quot;: &quot;VPC&quot;,
    &quot;OutputKey&quot;: &quot;VPCDefaultNetworkAcl&quot;,
    &quot;OutputValue&quot;: &quot;acl-b3cfc7d6&quot;
  },
  {
    &quot;Description&quot;: &quot;VPC Default Security Group that we blissfully ignore thanks to self-referencing bugs&quot;,
    &quot;OutputKey&quot;: &quot;VPCDefaultSecurityGroup&quot;,
    &quot;OutputValue&quot;: &quot;sg-3e50a559&quot;
  },
  {
    &quot;Description&quot;: &quot;VPC Security Group created by this stack&quot;,
    &quot;OutputKey&quot;: &quot;VPCSecurityGroup&quot;,
    &quot;OutputValue&quot;: &quot;sg-0c50a56b&quot;
  },
  {
    &quot;Description&quot;: &quot;The subnet id for VPCSubnet0&quot;,
    &quot;OutputKey&quot;: &quot;VPCSubnet0&quot;,
    &quot;OutputValue&quot;: &quot;subnet-995236b2&quot;
  },
  {
    &quot;Description&quot;: &quot;The subnet id for VPCSubnet1&quot;,
    &quot;OutputKey&quot;: &quot;VPCSubnet1&quot;,
    &quot;OutputValue&quot;: &quot;subnet-6aa4fd1d&quot;
  },
  {
    &quot;Description&quot;: &quot;The subnet id for VPCSubnet2&quot;,
    &quot;OutputKey&quot;: &quot;VPCSubnet2&quot;,
    &quot;OutputValue&quot;: &quot;subnet-ad3644f4&quot;
  }
]</code></pre></noscript></div>
</p>

<p>These CloudFormation Outputs list parameters that we will need to pass to the ElasticBeanstalk Environment creation during the next part of this walkthrough. </p>

<h1 id="one-final-vpc-note-iam-permissions-for-ec2-instance-profiles">One final VPC note: IAM permissions for EC2 instance profiles</h1>

<p>As a general rule of thumb, each AWS ElasticBanstalk Application Environment should be given its own IAM Instance Profile to use.</p>

<p>Each AWS EC2 instance should be allowed to assume an IAM role for an IAM instance profile that gives it access to the AWS cloud resources it must interface with.</p>

<p>This is accomplished by <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html">introspecting on AWS instance metadata</a>. If you haven’t been exposed to this yet, I strongly recommend poking around at <code>http://169.254.169.254</code> from your EC2 instances:</p>

<p><code>bash
curl http://169.254.169.254/latest/meta-data/iam/security-credentials/role-myapp-dev
</code></p>

<p>The JSON returned from that command allows an AWS library call with no credentials automatically obtain time-limited IAM STS credentials when run on AWS EC2 instances.</p>

<p>This avoids having to embed “permanent” IAM access/secret keys as environment variables that may “leak” over time to parties that shouldn’t have access.</p>

<p>Early on, we tried to do this as an ebextension in <code>.ebextensions/00_iam.config</code>, but this only works if the admin running the <code>eb create</code> has IAM permissions for the AWS account, and it appears impossible to change the launch InstanceProfile by defining option settings or overriding cloud resources in an ebextensions config file.</p>

<p>Instead, the VPC above generates an <code>InstanceProfile</code> that can be referenced later. More on that later in Part 2.</p>

<p>Stay tuned…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS Docker Walkthrough With ElasticBeanstalk: Part 2]]></title>
    <link href="http://ian.blenke.com/blog/2015/06/27/aws-docker-walkthrough-with-elasticbeanstalk-part-2/"/>
    <updated>2015-06-27T00:57:08-04:00</updated>
    <id>http://ian.blenke.com/blog/2015/06/27/aws-docker-walkthrough-with-elasticbeanstalk-part-2</id>
    <content type="html"><![CDATA[<p>While deploying docker containers for immutable infrastructure on AWS ElasticBeanstalk,
I’ve learned a number of useful tricks that go beyond the official Amazon documentation.</p>

<p>This series of posts are an attempt to summarize some of the useful bits that may benefit
others facing the same challenges.</p>

<hr />

<p>Previously: <a href="/blog/2015/06/27/aws-docker-walkthrough-with-elasticbeanstalk-part-1/">Part 1 : Preparing a VPC for your ElasticBeanstalk environments</a></p>

<hr />

<h1 id="part-2--creating-your-elasticbeanstalk-environment">Part 2 : Creating your ElasticBeanstalk environment</h1>

<hr />

<h3 id="step-1-create-your-application-in-aws">Step 1: Create your Application in AWS</h3>

<p>Each AWS account needs to have your ElasticBeanstalk application defined initially.</p>

<p>Operationally, there are few reasons to remove an application from an AWS account, so there’s a good bet it’s already there.</p>

<p><code>bash
aws elasticbeanstalk create-application \
  --profile aws-dev \
  --region us-east-1 \
  --application-name myapp \
  --description 'My Application'
</code></p>

<p>You should really only ever have to do this once per AWS account.</p>

<p>There is an example of this in the Makefile as the <code>make application</code> target.</p>

<h3 id="step-2--update-your-aws-development-environment">Step 2 : Update your AWS development environment.</h3>

<p>During our initial VPC creation, we used the <code>aws</code> command from the <code>awscli</code> python package.</p>

<p>When deploying ElasticBeanstalk applications, we use the <code>eb</code> command from the <code>awsebcli</code> python package.</p>

<p>On OS/X, we run:</p>

<p><code>bash
brew install awsebcli
</code></p>

<p>On Windows, chocolatey doesn’t have awsebcli, but we can install python pip:</p>

<p><code>bash
choco install pip
</code></p>

<p>Again, because <code>awsebcli</code> is a python tool, we can install with:</p>

<p><code>bash
pip install awscli
</code></p>

<p>You may (or may not) need to prefix that pip install with <code>sudo</code> on linux/unix flavors, depending. ie:</p>

<p><code>bash
sudo pip install awsebcli
</code></p>

<p>These tools will detect if they are out of date when you run them. You may eventually get a message like:</p>

<p><code>
Alert: An update to this CLI is available.
</code></p>

<p>When this happens, you will likely want to either upgrade via homebrew:</p>

<p><code>bash
brew update &amp; brew upgrade awsebcli
</code></p>

<p>or, more likely, upgrade using pip directly:</p>

<p><code>bash
pip install --upgrade awsebcli
</code></p>

<p>Again, you may (or may not) need to prefix that pip install with <code>sudo</code>, depending. ie:</p>

<p><code>bash
sudo pip install --upgrade awsebcli
</code></p>

<p>There really should be an awsebcli Docker image, but there presently is not. Add that to the list of images to build.</p>

<h3 id="step-3-create-a-ssh-key-pair-to-use">Step 3: Create a ssh key pair to use</h3>

<p>Typically you will want to generate an ssh key locally and upload the public part:</p>

<p><code>bash
ssh-keygen -t rsa -b 2048 -f ~/.ssh/myapp-dev -P ''
aws ec2 import-key-pair --key-name myapp-dev --public-key-material "$(cat ~/.ssh/myapp-dev.pub)"
</code></p>

<p>Alternatively, if you are on a development platform without ssh-keygen for some reason, you can have AWS generate it for you:</p>

<p><code>bash
aws ec2 create-key-pair --key-name cosmos-dev &gt; ~/.ssh/id_rsa-cosmos-dev
</code></p>

<p>The downside to the second method is that AWS has the private key (as they generated it, and you shipped it via https over the network to your local machine), whereas in the first example they do not.</p>

<p>This ssh key can be used to access AWS instances directly.</p>

<p>After creating this ssh key, it is probably a good idea that you add it to your team’s password management tool (Keepass, Hashicorp Vault, Trousseau, Ansible Vault, Chef Encrypted Databags, LastPass, 1Password, Dashlane, etc) so that the private key isn’t only on your development workstation in your local user account.</p>

<p>Note the naming convention of <code>~/.ssh/$(PROJECT)-$(ENVIRONMENT)</code> - this is the default key filename that <code>eb ssh</code> will use.</p>

<p>If you do not use the above naming convention, you will have to add the generated ssh private key to your ssh-agent’s keychain in order to use it:</p>

<p><code>bash
[ -n $SSH_AUTH_SOCK ] || eval $(ssh-agent)
ssh-add ~/.ssh/myapp-dev
</code></p>

<p>To list the ssh keys in your keychain, use:</p>

<p><code>bash
ssh-add -l
</code></p>

<p>So long as you see 4 or fewer keys, including they key you created above, you should be ok.</p>

<p>If you have more than 4 keys listed in your ssh-agent keychain, depending on the order they are tried by your ssh client, that may exceed the default number of ssh key retries allowed on the remote sshd server side, which will prevent you from connecting.</p>

<p>Now we should have an ssh key pair defined in AWS that we can use when spinning up instances.</p>

<h3 id="step-4-initialize-your-local-development-directory-for-the-eb-cli">Step 4: Initialize your local development directory for the eb cli</h3>

<p>Before using the <code>eb</code> command, you must <code>eb init</code> your project to create a <code>.elasticbeanstalk/config.yml</code> file:</p>

<p><code>bash
eb init --profile aws-dev
</code></p>

<p>The <code>--profile aws-dev</code> is optional, if you created profiles in your <code>~/.aws/config</code> file. If you are using AWS environment variables your your ACCESS/SECRET keys, or only one default AWS account, you may omit that.</p>

<p>The application must exist in AWS first, which is why this is run <em>after</em> the previous step of creating the Application in AWS.</p>

<p>You may be prompted for some critical bits:</p>

<pre><code>$ eb init --profile aws-dev
eb init --profile aws-dev

Select a default region
1) us-east-1 : US East (N. Virginia)
2) us-west-1 : US West (N. California)
3) us-west-2 : US West (Oregon)
4) eu-west-1 : EU (Ireland)
5) eu-central-1 : EU (Frankfurt)
6) ap-southeast-1 : Asia Pacific (Singapore)
7) ap-southeast-2 : Asia Pacific (Sydney)
8) ap-northeast-1 : Asia Pacific (Tokyo)
9) sa-east-1 : South America (Sao Paulo)
(default is 3): 1

Select an application to use
1) myapp
2) [ Create new Application ]
(default is 2): 1

Select a platform.
1) PHP
2) Node.js
3) IIS
4) Tomcat
5) Python
6) Ruby
7) Docker
8) Multi-container Docker
9) GlassFish
10) Go
(default is 1): 7

Select a platform version.
1) Docker 1.6.2
2) Docker 1.6.0
3) Docker 1.5.0
(default is 1): 1
Do you want to set up SSH for your instances?
(y/n): y

Select a keypair.
1) myapp-dev
2) [ Create new KeyPair ]
(default is 2): 1
</code></pre>

<p>Alternatively, to avoid the questions, you can specify the full arguments:</p>

<p><code>bash
eb init myapp --profile aws-dev --region us-east-1 -p 'Docker 1.6.2' -k myapp-dev
</code></p>

<p>The end result is a <code>.elasticbeanstalk/config.yml</code> that will look something like this:</p>

<p><code>yaml
branch-defaults:
  master:
    environment: null
global:
  application_name: myapp
  default_ec2_keyname: myapp-dev
  default_platform: Docker 1.6.2
  default_region: us-east-1
  profile: aws-dev
  sc: git
</code></p>

<p>Any field appearing as <code>null</code> will likely need some manual attention from you after the next step.</p>

<h3 id="step-5-create-the-elasticbeanstalk-environment">Step 5: Create the ElasticBeanstalk Environment</h3>

<p>Previously, in <a href="/blog/2015/06/27/aws-docker-walkthrough-with-elasticbeanstalk-part-1/">Part 1 : Preparing a VPC for your ElasticBeanstalk environments</a>, we generated a VPC using a CloudFormation with an output of the Subnets and Security Group. We will need those things below.</p>

<p>Here is a repeat of that gist:</p>

<p><div><script src='https://gist.github.com/59715079304a6db7182c.js'></script>
<noscript><pre><code>aws cloudformation describe-stacks --stack-name myapp-dev --profile aws-dev --region us-east-1 | jq -r &#39;.Stacks[].Outputs&#39;
[
  {
    &quot;Description&quot;: &quot;VPC Id&quot;,
    &quot;OutputKey&quot;: &quot;VpcId&quot;,
    &quot;OutputValue&quot;: &quot;vpc-b7d1d8d2&quot;
  },
  {
    &quot;Description&quot;: &quot;VPC&quot;,
    &quot;OutputKey&quot;: &quot;VPCDefaultNetworkAcl&quot;,
    &quot;OutputValue&quot;: &quot;acl-b3cfc7d6&quot;
  },
  {
    &quot;Description&quot;: &quot;VPC Default Security Group that we blissfully ignore thanks to self-referencing bugs&quot;,
    &quot;OutputKey&quot;: &quot;VPCDefaultSecurityGroup&quot;,
    &quot;OutputValue&quot;: &quot;sg-3e50a559&quot;
  },
  {
    &quot;Description&quot;: &quot;VPC Security Group created by this stack&quot;,
    &quot;OutputKey&quot;: &quot;VPCSecurityGroup&quot;,
    &quot;OutputValue&quot;: &quot;sg-0c50a56b&quot;
  },
  {
    &quot;Description&quot;: &quot;The subnet id for VPCSubnet0&quot;,
    &quot;OutputKey&quot;: &quot;VPCSubnet0&quot;,
    &quot;OutputValue&quot;: &quot;subnet-995236b2&quot;
  },
  {
    &quot;Description&quot;: &quot;The subnet id for VPCSubnet1&quot;,
    &quot;OutputKey&quot;: &quot;VPCSubnet1&quot;,
    &quot;OutputValue&quot;: &quot;subnet-6aa4fd1d&quot;
  },
  {
    &quot;Description&quot;: &quot;The subnet id for VPCSubnet2&quot;,
    &quot;OutputKey&quot;: &quot;VPCSubnet2&quot;,
    &quot;OutputValue&quot;: &quot;subnet-ad3644f4&quot;
  }
]</code></pre></noscript></div>
</p>

<p>There are two ways to create a new ElasticBeanstalk environment:</p>

<ul>
  <li>Using <code>eb create</code> with full arguments for the various details of the environment.</li>
  <li>Using <code>eb create</code> with a <code>--cfg</code> argument of a previous <code>eb config save</code> to a YAML file in <code>.elasticbeanstalk/saved_configs</code>.</li>
</ul>

<p>The first way looks something like this:</p>

<pre><code>eb create myapp-dev --verbose \
  --profile aws-dev \
  --tier WebServer \
  --cname myapp-dev \
  -p '64bit Amazon Linux 2015.03 v1.4.3 running Docker 1.6.2' \
  -k myapp-dev \
  -ip myapp-dev-InstanceProfile-1KCQJP9M5TSVZ \
  --tags Project=myapp,Environment=dev \
  --envvars DEBUG=info \
  --vpc.ec2subnets=subnet-995236b2,subnet-6aa4fd1d,subnet-ad3644f4 \
  --vpc.elbsubnets=subnet-995236b2,subnet-6aa4fd1d,subnet-ad3644f4 \
  --vpc.publicip --vpc.elbpublic --vpc.securitygroups=sg-0c50a56b
</code></pre>

<p>The <code>Makefile</code> has an <code>environment</code> target that removes the need to fill in the fields manually:</p>

<pre><code>outputs:
    @which jq &gt; /dev/null 2&gt;&amp;1 || ( which brew &amp;&amp; brew install jq || which apt-get &amp;&amp; apt-get install jq || which yum &amp;&amp; yum install jq || which choco &amp;&amp; choco install jq)
    @aws cloudformation describe-stacks --stack-name myapp-dev --profile aws-dev --region us-east-1 | jq -r '.Stacks[].Outputs | map({key: .OutputKey, value: .OutputValue}) | from_entries'

environment:
    eb create $(STACK) --verbose \
      --profile aws-dev \
      --tier WebServer \
      --cname $(shell whoami)-$(STACK) \
      -p '64bit Amazon Linux 2015.03 v1.4.3 running Docker 1.6.2' \
      -k $(STACK) \
      -ip $(shell make outputs | jq -r .InstanceProfile) \
      --tags Project=$(PROJECT),Environment=$(ENVIRONMENT) \
      --envvars DEBUG=info \
      --vpc.ec2subnets=$(shell make outputs | jq -r '[ .VPCSubnet0, .VPCSubnet1, .VPCSubnet2 ] | @csv') \
      --vpc.elbsubnets=$(shell make outputs | jq -r '[ .VPCSubnet0, .VPCSubnet1, .VPCSubnet2 ] | @csv') \
      --vpc.publicip --vpc.elbpublic \
      --vpc.securitygroups=$(shell make outputs | jq -r .VPCSecurityGroup)
</code></pre>

<p>On the other hand, after a quick config save:</p>

<p><code>bash
eb config save myapp-dev --profile aws-dev --region us-east-1 --cfg myapp-dev-sc
</code></p>

<p>We now have the above settings in a YAML file <code>.elasticbeanstalk/saved_configs/myapp-dev-sc.cfg.yml</code> which can be committed to our git project.</p>

<p>This leads to the second way to create an ElasticBeanstalk environment:</p>

<p><code>bash
eb create myapp-dev --cname myapp-dev --cfg myapp-dev-sc --profile aws-dev
</code></p>

<p>The flip side of that is the YAML save config has static values embedded in it for a specific deployed VPC.</p>

<p>More docker goodness to come in Part 3…</p>
]]></content>
  </entry>
  
</feed>
