<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Seabios | Ian Blenke - DevOps]]></title>
  <link href="http://ian.blenke.com/blog/categories/seabios/atom.xml" rel="self"/>
  <link href="http://ian.blenke.com/"/>
  <updated>2015-06-27T15:52:04-04:00</updated>
  <id>http://ian.blenke.com/</id>
  <author>
    <name><![CDATA[Ian Blenke]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenStack on a Chromebox]]></title>
    <link href="http://ian.blenke.com/blog/2014/11/09/openstack-on-a-chromebox/"/>
    <updated>2014-11-09T19:02:40-05:00</updated>
    <id>http://ian.blenke.com/blog/2014/11/09/openstack-on-a-chromebox</id>
    <content type="html"><![CDATA[<p>Saturday’s project was installing OpenStack on a ChromeBox.</p>

<h2 id="step-0-identify-your-hardware-add-ram">Step 0: Identify your hardware, add RAM</h2>

<p>Before you begin, make sure you <a href="http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices">know which ChromeOS device you have</a>.</p>

<p>In my case, it was a <a href="http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-sandy-bridge">Samsung Series 3 Chromebox</a>.</p>

<p>Thankfully, the memory was very easy to upgrade to 16G, as the bottom snaps right off.</p>

<p><img src="/images/chromebox/stumpy-top-mid.jpg" alt="Samsung Series 3 Chromebox with bottom exposed" /></p>

<h2 id="step-1-make-a-chromeos-recovery-usb">Step 1: Make a ChromeOS recovery USB</h2>

<p>Plug in a 4G or larger USB stick, then open this URL on your ChromeOS device:</p>

<p><a href="chrome://imageburner">chrome://imageburner</a></p>

<p>Follow the instructions.</p>

<p>We shouldn’t need this, but you never know. (And, yes, I did end up needing it during one of my iterations while writing this post).</p>

<h2 id="step-2-enable-developer-mode">Step 2: Enable developer mode</h2>

<p>The switch in the image is how I put my ChromeBox <a href="http://www.chromium.org/chromium-os/poking-around-your-chrome-os-device#TOC-Putting-your-Chrome-OS-Device-into-Developer-Mode">into development mode</a>.</p>

<p><img src="/images/chromebox/stumpy-dev-switch.jpg" alt="Dev Switch on a Samsung Chromebox" /></p>

<p>After flipping the switch, reboot.</p>

<p>On this first reboot, the existing on-board storage will be wiped entirely, erasing any account credentials and cached content.</p>

<h2 id="step-3-login-to-the-console-as-chronos">Step 3: Login to the console as “chronos”</h2>

<p>Using cntl-alt-F2, enter the username “chronos” at the login: prompt. Hit return at the password: prompt (the default chronos password is an empty string).</p>

<p>Note: You did not actually need to login to google via the UI interface.</p>

<h2 id="step-4-enable-usb-and-seabios-booting">Step 4: Enable USB and SeaBIOS booting</h2>

<p>Now that you have a shell as chronos, you can enable USB booting.</p>

<pre><code>sudo crossystem dev_boot_usb=1
</code></pre>

<p>After enabling and rebooting, you can now boot from USB drives with <code>cntl-u</code></p>

<p>In order to install Ubuntu (or your distro of choice), we need to legacy boot. This requires a BIOS.</p>

<p>Newer ChromeBox hardware includes SeaBIOS natively.</p>

<pre><code>sudo crossystem dev_boot_legacy=1
</code></pre>

<p>After enabling and rebooting, you can now boot to legacy images with <code>cntl-l</code></p>

<p>If you have an older ChromeBox (like the Samsung Series 3) that doesn’t have a SeaBIOS boot, you will need to flash one.</p>

<p>Flashing a new bootstrap requires a jumper or other physical change to hardware to allow the <a href="http://flashrom.org/Flashrom">flashrom</a> tool to write to flash.</p>

<p>NOTE: <b>ASSUME THAT THIS WILL LIKELY BRICK YOUR CHROMEBOX. YOU HAVE BEEN WARNED</b></p>

<p>On the Samsung Series 3 ChromeBox, the jumper looks like this:</p>

<p><img src="/images/chromebox/spi-flash-chromebox.jpg" alt="Samsung Series 3 flash jumper" /></p>

<p>A bit of folded tin-foil made for a quick jumper.</p>

<p><a href="http://johnlewis.ie/">John Lewis</a> is <a href="https://johnlewis.ie/custom-chromebook-firmware/rom-download/">maintaining a marvelous script</a> that auto-detects and flashes an updated SeaBIOS for most ChromeBook/ChromeBox hardware:</p>

<p><div><script src='https://gist.github.com/22e429b4424b74e51869.js'></script>
<noscript><pre><code>wget https://johnlewis.ie/getnflash_johnlewis_rom.sh
chmod u+x getnflash_johnlewis_rom.sh
./getnflash_johnlewis_rom.sh</code></pre></noscript></div>
</p>

<p>The script makes you type “If this bricks my Chromebook/box, on my head be it!” to make sure you understand that you are most likely going to brick your chromebox/chromebook by proceeding. This is no joke.</p>

<p>Being ok with potentially bricking my ChromeBox, I went ahead.</p>

<p>The script ran to completion without errors, and was thoroughly successful.</p>

<p>After rebooting, I now get a SeaBIOS splash identification (rather than the eventual sick computer).</p>

<p>The downside to doing this is that I now <em>must</em> boot off of an external USB device, as the SeaBIOS doesn’t seem to support booting from the built-in MMC SSD anymore.</p>

<h2 id="step-5-install-your-linux-distribution">Step 5: Install your Linux distribution</h2>

<p>I went ahead and pulled an Ubuntu Trust 14.04 ISO and DD’ed it to a USB stick on my Mac.</p>

<pre><code>wget -c http://releases.ubuntu.com/14.04/ubuntu-14.04-desktop-amd64.iso
diskutil list
hdiutil unmount /Volumes/USBSTICK
sudo dd if=ubuntu-14.04-desktop-amd64.iso of=/dev/disk5 bs=1m
</code></pre>

<p>After it finished flashing, I removed the USB stick from my Mac and plugged it into the front of the ChromeBox.</p>

<p>The USB installation media for Ubuntu was detected by SeaBIOS as the second bootable USB device.</p>

<p>I also attached 2 external 1TB USB disks to the back as the media that will be installed to.
These appeared as the third and fourth bootable devices to SeaBIOS.</p>

<p>With my new SeaBIOS bootstrap, I now must hit “Esc” and “2” to boot off of the first USB stick for the Ubuntu installation.</p>

<p>This presented me with the Ubunu boot menu.</p>

<p>Beyond this point, I installed Ubuntu to the two external 1TB USB disks, with a primary boot partition (type “83”) on each for /boot as normal linux ext4, and a primary RAID partition (type “fd”) on each for the RAID1 mirror upon which I layered LVM with a volume group named “vg” and a “rootfs” and a “swapfs” logical volume. At the end, I installed the grub boot sector to /dev/sdb and /dev/sdc (the two external 1TB USB drives).</p>

<p>After removing the USB stick for the Ubuntu installation media, the SeaBIOS entries shifted by 1.</p>

<p>With my new SeaBIOS bootstrap, I now must hit “Esc” and “2” to boot off of the first USB 1TB drive, or “3” for the second USB 1TB drive.</p>

<p>When I figure out how to get around the SeaBIOS hang on boot if I don’t do this, I will update this blog post.</p>

<h2 id="step-4-devstack-installation-of-openstack">Step 4: Devstack installation of OpenStack</h2>

<p>From this point forward, I followed the <a href="http://devstack.org">DevStack</a> <a href="http://docs.openstack.org/developer/devstack/guides/single-machine.html">All-in-one single-machine install guide</a>.</p>

<p>My local.conf for the all-in-one install is a collection of bits and pieces collected while digging around:</p>

<p><div><script src='https://gist.github.com/7084bf5a815d4bdc474c.js'></script>
<noscript><pre><code>[[local|localrc]]

SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50
ADMIN_PASSWORD=nomoresecrets
MYSQL_PASSWORD=iheartdatabases
RABBIT_PASSWORD=flopsymopsy
SERVICE_PASSWORD=$ADMIN_PASSWORD
#HOST_IP=10.0.0.106
DEST=/opt/stack
LOGFILE=$DEST/logs/stack.sh.log
LOGDAYS=7
#LOG_COLOR=False
# Uncomment these to grab the milestone-proposed branches from the repos:
#CINDER_BRANCH=milestone-proposed
#GLANCE_BRANCH=milestone-proposed
#HORIZON_BRANCH=milestone-proposed
#KEYSTONE_BRANCH=milestone-proposed
#KEYSTONECLIENT_BRANCH=milestone-proposed
#NOVA_BRANCH=milestone-proposed
#NOVACLIENT_BRANCH=milestone-proposed
#NEUTRON_BRANCH=milestone-proposed
#SWIFT_BRANCH=milestone-proposed
SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5
SWIFT_REPLICAS=1
SWIFT_DATA_DIR=$DEST/data/swift
FIXED_RANGE=10.1.0.0/24
FLOATING_RANGE=10.2.0.0/24
FIXED_NETWORK_SIZE=256
PUBLIC_INTERFACE=eth0
NET_MAN=FlatDHCPManager
FLAT_NETWORK_BRIDGE=br100
SCREEN_LOGDIR=$DEST/logs/screen
VOLUME_GROUP=&quot;vg&quot;
VOLUME_NAME_PREFIX=&quot;cinder-&quot;
VOLUME_BACKING_FILE_SIZE=10250M
API_RATE_LIMIT=False
VIRT_DRIVER=libvirt
LIBVIRT_TYPE=kvm
SCHEDULER=nova.scheduler.simple.SimpleScheduler</code></pre></noscript></div>
</p>

<p>As the stack user, running <code>./stack.sh</code> kicked off the install, and it completed successfully.</p>

<p>At the end, it tells you the URLs to use to access your new OpenStack server:</p>

<pre><code>Horizon is now available at http://10.0.0.106/
Keystone is serving at http://10.0.0.106:5000/v2.0/
Examples on using novaclient command line is in exercise.sh
The default users are: admin and demo
The password: nomoresecrets
This is your host ip: 10.0.0.106
</code></pre>

<p>I also ended up creating this <code>~/.fog</code> file locally on my Mac, based on <a href="http://docs.cloudfoundry.org/deploying/openstack/validate_openstack.html">CloudFoundry’s guide to validating your OpenStack</a>.</p>

<p><div><script src='https://gist.github.com/c87328c5635cdcadb8e0.js'></script>
<noscript><pre><code>:openstack:
  :openstack_auth_url:  http://10.0.0.106:5000/v2.0/tokens
  :openstack_api_key:   nomoresecrets
  :openstack_username:  admin
  :openstack_tenant:    admin
  :openstack_region:    RegionOne # Optional
  </code></pre></noscript></div>
</p>

<p>With it, I can now use the <a href="http://fog.io">fog</a> command-line tool locally on my development Mac to manipulate the ChromeBox based OpenStack server.</p>

<p>Cheers!</p>

]]></content>
  </entry>
  
</feed>
