<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coreos on Ian Blenke</title>
    <link>http://ian.blenke.com/categories/coreos/</link>
    <description>Recent content in Coreos on Ian Blenke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Tue, 10 Mar 2015 16:38:33 -0400</lastBuildDate>
    <atom:link href="http://ian.blenke.com/categories/coreos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploying Amazon ECS on CoreOS</title>
      <link>http://ian.blenke.com/post/2015-03-10-deploying-amazon-ecs-on-coreos/</link>
      <pubDate>Tue, 10 Mar 2015 16:38:33 -0400</pubDate>
      
      <guid>http://ian.blenke.com/post/2015-03-10-deploying-amazon-ecs-on-coreos/</guid>
      <description>&lt;p&gt;Today, I stumbled on the official &lt;a href=&#34;https://coreos.com/docs/running-coreos/cloud-providers/ecs/&#34;&gt;CoreOS page on ECS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been putting off ECS for a while, it was time to give it a try.&lt;/p&gt;

&lt;p&gt;To create the ECS cluster, we will need the aws commandline tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;which aws || pip install awscli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you have your &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; defined in your shell environment.&lt;/p&gt;

&lt;p&gt;Create the ECS cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aws ecs create-cluster --cluster-name Cosmos-Dev
{
    &amp;quot;cluster&amp;quot;: {
        &amp;quot;clusterName&amp;quot;: &amp;quot;Cosmos-Dev&amp;quot;,
        &amp;quot;status&amp;quot;: &amp;quot;ACTIVE&amp;quot;,
        &amp;quot;clusterArn&amp;quot;: &amp;quot;arn:aws:ecs:us-east-1:123456789012:cluster/My-ECS-Cluster&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the global fleet unit for amazon-ecs-agent.service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; amazon-ecs-agent.service
[Unit]
Description=Amazon ECS Agent
After=docker.service
Requires=docker.service
[Service]
Environment=ECS_CLUSTER=My-ECS-Cluster
Environment=ECS_LOGLEVEL=warn
Environment=AWS_REGION=us-east-1
ExecStartPre=-/usr/bin/docker kill ecs-agent
ExecStartPre=-/usr/bin/docker rm ecs-agent
ExecStartPre=/usr/bin/docker pull amazon/amazon-ecs-agent
ExecStart=/usr/bin/docker run --name ecs-agent \
    --env=ECS_CLUSTER=${ECS_CLUSTER}\
    --env=ECS_LOGLEVEL=${ECS_LOGLEVEL} \
    --publish=127.0.0.1:51678:51678 \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    amazon/amazon-ecs-agent
ExecStop=/usr/bin/docker stop ecs-agent
[X-Fleet]
Global=true
EOF
fleetctl start amazon-ecs-agent.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This registers a ContainerInstance to the &lt;code&gt;My-ECS-Cluster&lt;/code&gt; in region &lt;code&gt;us-east-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: this is using the EC2 instance&amp;rsquo;s instance profile IAM credentials. You will want to make sure you&amp;rsquo;ve assigned an instance profile with a Role that has &amp;ldquo;ecs:*&amp;rdquo; access.
For this, you may want to take a look at the &lt;a href=&#34;https://s3.amazonaws.com/amazon-ecs-cloudformation/Amazon_ECS_Quickstart.template&#34;&gt;Amazon ECS Quickstart CloudFormation template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now from a CoreOS host, we can query locally to enumerate the running ContainerInstances in our fleet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fleetctl list-machines -fields=ip -no-legend | while read ip ; do \
    echo $ip $(ssh -n $ip curl -s http://169.254.169.254/latest/meta-data/instance-id) \
    $(ssh -n $ip curl -s http://localhost:51678/v1/metadata | \
      docker run -i realguess/jq jq .ContainerInstanceArn) ; \
  done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which returns something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10.113.0.23 i-12345678 &amp;quot;arn:aws:ecs:us-east-1:123456789012:container-instance/674140ae-1234-4321-1234-4abf7878caba&amp;quot;
10.113.1.42 i-23456789 &amp;quot;arn:aws:ecs:us-east-1:123456789012:container-instance/c3506771-1234-4321-1234-1f1b1783c924&amp;quot;
10.113.2.66 i-34567891 &amp;quot;arn:aws:ecs:us-east-1:123456789012:container-instance/75d30c64-1234-4321-1234-8be8edeec9c6&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can query ECS and get the same:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ aws ecs list-container-instances --cluster My-ECS-Cluster | grep arn | cut -d&#39;&amp;quot;&#39; -f2 | \
  xargs -L1 -I% aws ecs describe-container-instances --cluster My-ECS-Cluster --container-instance % | \
  jq &#39;.containerInstances[] | .ec2InstanceId + &amp;quot; &amp;quot; + .containerInstanceArn&#39;
&amp;quot;i-12345678 arn:aws:ecs:us-east-1:123456789012:container-instance/674140ae-1234-4321-1234-4abf7878caba&amp;quot;
&amp;quot;i-23456789 arn:aws:ecs:us-east-1:123456789012:container-instance/c3506771-1234-4321-1234-1f1b1783c924&amp;quot;
&amp;quot;i-34567891 arn:aws:ecs:us-east-1:123456789012:container-instance/75d30c64-1234-4321-1234-8be8edeec9c6&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ECS cluster is ready to use.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is no scheduler here. ECS is a harness for orchestrating docker containers in a cluster as &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Where these tasks are allocated is left up to the AWS customer.&lt;/p&gt;

&lt;p&gt;What we really need is a &lt;em&gt;scheduler&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;CoreOS has a form of a scheduler in fleet, but that is for fleet units of systemd services, and is not limited to docker containers as ECS is.
Fleet&amp;rsquo;s scheduler is also currently a bit weak in that it schedules new units to the fleet machine with the fewest number of units.&lt;/p&gt;

&lt;p&gt;Kubernetes has a random scheduler, which is better in a couple ways, but does not fairly allocate the system resources.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;best&lt;/em&gt; scheduler at present is Mesos, which takes into account resource sizing estimates and current utilization.&lt;/p&gt;

&lt;p&gt;Normally, Mesos uses Mesos Slaves to run work. Mesos can also use ECS as a backend instead.&lt;/p&gt;

&lt;p&gt;My next steps: Deploy Mesos using the &lt;a href=&#34;https://github.com/awslabs/ecs-mesos-scheduler-driver&#34;&gt;ecs-mesos-scheduler-driver&lt;/a&gt;, as &lt;a href=&#34;http://jpetazzo.github.io/2015/01/14/amazon-docker-ecs-ec2-container-service/&#34;&gt;summarized by jpetazzo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Immutable Infrastructure Persistence</title>
      <link>http://ian.blenke.com/immutable-infrastructure-persistence/</link>
      <pubDate>Sat, 18 Oct 2014 11:55:14 -0500</pubDate>
      
      <guid>http://ian.blenke.com/immutable-infrastructure-persistence/</guid>
      <description>&lt;p&gt;Here is a link to my &lt;a href=&#34;http://barcamptampabay.org/&#34;&gt;Tampa Bay Barcamp 2014 presentation slides&lt;/a&gt; for &lt;a href=&#34;http://ian.blenke.com/immutable-infrastructure-persistence/&#34;&gt;Immutable Infrastructure Persistence&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>